{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/marco/Desktop/AWM_restaurant/AWM_Restaurant/mobile/MobileRestaurant/PlateList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Plate from \"./Plate\";\nimport UpdateButton from \"./UpdateButton\";\n\nvar PlateList = function (_Component) {\n  _inherits(PlateList, _Component);\n\n  var _super = _createSuper(PlateList);\n\n  function PlateList(props) {\n    var _this;\n\n    _classCallCheck(this, PlateList);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [],\n      current_order: {},\n      isLoading: true,\n      value: 0\n    };\n    _this.onClickPlate = _this.onClickPlate.bind(_assertThisInitialized(_this));\n    _this.updateCurrentOrder = _this.updateCurrentOrder.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PlateList, [{\n    key: \"initOrder\",\n    value: function initOrder() {\n      console.log(\"INIT ORDER...\");\n      console.log(this.state.data);\n      var curr_order = {};\n\n      for (var plate_idx in this.state.data) {\n        curr_order[this.state.data[plate_idx].code] = 0;\n      }\n\n      this.setState({\n        current_order: curr_order\n      });\n      console.log(this.state.current_order);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var request = new XMLHttpRequest();\n\n      request.onreadystatechange = function (e) {\n        if (request.readyState !== 4) {\n          return;\n        }\n\n        if (request.status === 200) {\n          _this2.setState({\n            data: JSON.parse(request.responseText).plates,\n            isLoading: false\n          });\n\n          _this2.initOrder();\n        } else {\n          console.warn('error');\n        }\n      };\n\n      request.open('GET', 'http://192.168.1.33:8000/restaurant/plates');\n      request.setRequestHeader(\"Content-Type\", \"application/json\");\n      request.send();\n    }\n  }, {\n    key: \"onClickPlate\",\n    value: function onClickPlate(item, value) {\n      console.log(\"RECEIVED\");\n      console.log(item);\n      console.log(value);\n      var curr_order = this.state.current_order;\n      curr_order[item.code] += +value;\n      this.setState({\n        current_order: curr_order\n      });\n      console.log(\"UPDATED ORDER:\");\n      console.log(this.state.current_order);\n    }\n  }, {\n    key: \"updateCurrentOrder\",\n    value: function updateCurrentOrder(text, id) {\n      var curr_order = this.state.current_order;\n      curr_order[id] += +text;\n      this.setState({\n        current_order: curr_order\n      });\n      console.log(\"UPDATED ORDER:\");\n      console.log(this.state.current_order);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(\"RENDER!\");\n      console.log(this.state.value);\n      var _this$state = this.state,\n          data = _this$state.data,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value;\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          padding: 24\n        },\n        id: \"PlatesList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 5\n        }\n      }, isLoading ? React.createElement(ActivityIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 22\n        }\n      }) : React.createElement(React.Fragment, null, React.createElement(FlatList, {\n        data: data,\n        key: 'plates_flatlist',\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(React.Fragment, null, React.createElement(Plate, {\n            key: item.code + '_plate',\n            item: item,\n            ordered: false,\n            clicked: false,\n            onClick: _this3.onClickPlate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }\n          }), React.createElement(TextInput, {\n            value: value.toString(),\n            keyboardType: \"number-pad\",\n            key: item.code + '_pad',\n            id: item.code + '_pad',\n            onChangeText: function onChangeText(text) {\n              console.log(text);\n\n              _this3.updateCurrentOrder(text, item.code);\n\n              _this3.setState({\n                value: _this3.state.current_order[item.code]\n              });\n\n              console.log(_this3.state.value);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }), React.createElement(UpdateButton, {\n        title: \"Update Order\",\n        navigation: this.props.navigation,\n        order: this.state.current_order,\n        order_code: this.props.order_code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return PlateList;\n}(Component);\n\nexport default PlateList;","map":{"version":3,"sources":["/home/marco/Desktop/AWM_restaurant/AWM_Restaurant/mobile/MobileRestaurant/PlateList.js"],"names":["React","Component","Plate","UpdateButton","PlateList","props","state","data","current_order","isLoading","value","onClickPlate","bind","updateCurrentOrder","console","log","curr_order","plate_idx","code","setState","request","XMLHttpRequest","onreadystatechange","e","readyState","status","JSON","parse","responseText","plates","initOrder","warn","open","setRequestHeader","send","item","text","id","flex","padding","toString","navigation","order_code"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {FlatList, ActivityIndicator, Text, TextInput, View, Button} from 'react-native';\nimport Plate from './Plate';\nimport UpdateButton from './UpdateButton'\n\nclass PlateList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      // MAPPING plate_code: quantity\n      current_order: {},\n      isLoading: true,\n      value: 0,\n    };\n    this.onClickPlate = this.onClickPlate.bind(this)\n    this.updateCurrentOrder = this.updateCurrentOrder.bind(this)\n  }\n\n  initOrder(){\n    console.log(\"INIT ORDER...\")\n    console.log(this.state.data)\n    var curr_order = {}\n    for (var plate_idx in this.state.data){\n        curr_order[this.state.data[plate_idx].code] = 0\n    }\n    this.setState({current_order: curr_order})\n    console.log(this.state.current_order)\n  }\n\n  componentDidMount() {\n\n    var request = new XMLHttpRequest();\n    request.onreadystatechange = (e) => {\n      if (request.readyState !== 4) {\n        return;\n      }\n\n      if (request.status === 200) {\n        //console.log('success', JSON.parse(request.responseText));\n        this.setState({data: JSON.parse(request.responseText).plates, isLoading: false})\n        this.initOrder()\n      } else {\n        console.warn('error');\n      }\n    };\n\n    request.open('GET', 'http://192.168.1.33:8000/restaurant/plates');\n    request.setRequestHeader(\"Content-Type\", \"application/json\");\n    request.send();\n\n\n  }\n\n  // INVECE CHE FARLO SUL SINGOLO PIATTO, implementare una funzione che scorra tutti i piatti e i pad e crei l'ordine?\n  onClickPlate(item, value){\n    console.log(\"RECEIVED\")\n    console.log(item)\n    console.log(value)\n\n    var curr_order = this.state.current_order\n                        // operatore unario '+' converte in numero.\n    curr_order[item.code] += +value\n    this.setState({current_order: curr_order})\n    console.log(\"UPDATED ORDER:\")\n    console.log(this.state.current_order)\n  }\n\n\n\n  updateCurrentOrder(text, id){\n    var curr_order = this.state.current_order\n    curr_order[id] += +text\n    this.setState({current_order: curr_order})\n    //this.setState({value: curr_order[id]})\n    console.log(\"UPDATED ORDER:\")\n    console.log(this.state.current_order)\n  }\n\n\n  render() {\n  console.log(\"RENDER!\")\n  console.log(this.state.value)\n  const { data, isLoading, value } = this.state;\n  //console.log(this.state)\n    return (\n\n    <View style={{ flex: 1, padding: 24 }}\n            id='PlatesList'>\n        {isLoading ? <ActivityIndicator/> : (\n        <>\n            <FlatList\n            data={data}\n            key={'plates_flatlist'}\n            renderItem={({ item }) => (\n              <>\n                  <Plate key={item.code+'_plate'} item={item} ordered={false} clicked={false} onClick={this.onClickPlate}/>\n\n                  <TextInput\n                      value={value.toString()}\n                      keyboardType='number-pad'\n                      key={item.code+'_pad'}\n                      id={item.code+'_pad'}\n                      onChangeText={(text) => {\n                                                  console.log(text);\n\n                                                  this.updateCurrentOrder(text, item.code);\n                                                  this.setState({value: this.state.current_order[item.code]})\n                                                  console.log(this.state.value)\n                                              }}\n                  />\n              </>\n            )}\n          />\n\n        <UpdateButton title=\"Update Order\" navigation={this.props.navigation} order={this.state.current_order} order_code={this.props.order_code}/>\n        </>\n        )}\n    </View>\n    );\n  }\n}\n\nexport default PlateList;\n"]},"metadata":{},"sourceType":"module"}